{"ast":null,"code":"var _jsxFileName = \"/Users/amyolsen/Documents/ReactJS/next-trip/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport logo from \"./logo.svg\";\nimport ChooseDirection from './ChooseDirection';\nimport './Mobile.css';\nimport './Tablet.css';\nimport './Desktop.css';\nimport './Luxury.css';\nimport './App.css';\n\nconst ChooseRoute = props => {\n  console.log(\"In chooseroute\");\n  console.log(props.routeLoaded);\n\n  if (props.routeLoaded) {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Please select a route from the options below to see the directions and stops available for you!\"), React.createElement(\"select\", {\n      id: \"Route\",\n      \"data-testid\": \"Select-Route\",\n      name: \"Route\",\n      onChange: props.routeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, props.routeData.map(data => React.createElement(\"option\", {\n      key: data.Route,\n      value: data.Route,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, data.Description))), React.createElement(\"i\", {\n      className: \"fas fa-arrow-circle-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Loading\");\n  }\n};\n/*\nconst ChooseDirection = (props) => {\n    console.log(\"In Choose Directions\")\n    if (props.directionLoaded) {\n        return (<React.Fragment>\n            <div className=\"description\">Choose a direction: </div>\n            <input type='radio' name='Direction' id={props.directionData0.Value} value={props.directionData0.Value} onClick={props.directionHandler} defaultChecked ></input><label htmlFor={props.directionData0.Value}>{props.directionData0.Text.toLowerCase()}</label>\n            <input type='radio' name='Direction' id={props.directionData1.Value} value={props.directionData1.Value} onClick={props.directionHandler}></input><label htmlFor={props.directionData1.Value}>{props.directionData1.Text.toLowerCase()}</label>\n        </React.Fragment>)\n    }\n    else {\n        return null\n    }\n}*/\n\n\nconst ShowStops = props => {\n  if (props.stopLoaded) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, props.stopData.map(stop => React.createElement(\"li\", {\n      key: stop.Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, stop.Text)));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Please choose a route above to see related stops.\");\n  }\n};\n\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.setState({\n        routeLoading: true\n      });\n      fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          routeLoading: false,\n          routeLoaded: true,\n          routeData: result\n        });\n        console.log(\"Route is loaded, here is data: \");\n        console.log(this.state.routeData);\n      }, error => {\n        this.setState({\n          routeLoaded: false,\n          routeLoading: false,\n          error\n        });\n      });\n    };\n\n    this.getStops = () => {\n      console.log(\"In getStops\");\n      this.setState({\n        stopLoading: true\n      });\n      console.log(\"Fetching this route: \");\n      console.log('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json');\n      fetch('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          stopData: result,\n          stopLoaded: true\n        });\n      }, error => {\n        this.setState({\n          stopLoaded: false,\n          stopLoading: false,\n          error\n        });\n      });\n    };\n\n    this.changeDirection = event => {\n      console.log(\"in change direction\");\n      this.setState({\n        direction: event.target.value\n      }, this.getStops);\n    };\n\n    this.handleDirection = event => {\n      console.log(\"In handleDirection\"); // Update state values\n\n      this.setState({\n        route: event.target.value,\n        directionLoading: true,\n        directionLoaded: false\n      });\n      console.log(\"Updated state.route to\");\n      console.log(event.target.value);\n      console.log('In handle direction');\n      fetch('https://svc.metrotransit.org/NexTrip/Directions/' + event.target.value + '?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          directionLoaded: true,\n          directionLoading: false,\n          directionData: result,\n          direction: result[0].Value\n        });\n        this.getStops();\n      }, error => {\n        this.setState({\n          directionLoaded: false,\n          directionLoading: false,\n          error\n        });\n      });\n    };\n\n    this.state = {\n      routeData: [],\n      route: '',\n      routeLoaded: false,\n      routeLoading: false,\n      directionData: [],\n      direction: '',\n      directionLoaded: false,\n      directionLoading: false,\n      stopData: [],\n      stopLoaded: false,\n      stopLoading: false,\n      error: null\n    };\n    this.getStops = this.getStops.bind(this);\n    this.changeDirection = this.changeDirection.bind(this);\n    this.handleDirection = this.handleDirection.bind(this);\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"route-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(ChooseRoute, {\n      state: this.state,\n      routeLoaded: this.state.routeLoaded,\n      routeData: this.state.routeData,\n      routeHandler: this.handleDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"directions-container\",\n      \"data-testid\": \"Direction-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(ChooseDirection, {\n      directionLoaded: this.state.directionLoaded,\n      directionData0: this.state.directionData[0],\n      directionData1: this.state.directionData[1],\n      directionHandler: this.changeDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"stops-container\",\n      \"data-testid\": \"Stops-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Stops\"), React.createElement(ShowStops, {\n      stopLoaded: this.state.stopLoaded,\n      stopData: this.state.stopData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))));\n  }\n\n} // ? <select id=\"Directions\" name=\"Direction\" onChange={this.changeDirection}>\n//         <option value={this.state.directionData[0].Value}>{this.state.directionData[0].Text}</option>\n//         <option value={this.state.directionData[1].Value}>{this.state.directionData[1].Text}</option>\n//     </select>\n\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"note\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"color-red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, \"This application is sourced by real-time data from \"), \" \", React.createElement(\"img\", {\n    src: \"https://www.metrotransit.org/img/MetroTransitLogo.svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  })), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, \"NexTrip\"), React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"application\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(Master, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amyolsen/Documents/ReactJS/next-trip/src/App.js"],"names":["React","Component","BrowserRouter","Route","Switch","ChooseDirection","ChooseRoute","props","console","log","routeLoaded","routeHandler","routeData","map","data","Description","ShowStops","stopLoaded","stopData","stop","Value","Text","Master","constructor","componentDidMount","setState","routeLoading","fetch","then","res","json","result","state","error","getStops","stopLoading","route","direction","changeDirection","event","target","value","handleDirection","directionLoading","directionLoaded","directionData","bind","render","App"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport ChooseDirection from './ChooseDirection'\nimport './Mobile.css';\nimport './Tablet.css';\nimport './Desktop.css';\nimport './Luxury.css';\nimport './App.css';\n\nconst ChooseRoute = ( props ) => {\n    console.log(\"In chooseroute\")\n    console.log(props.routeLoaded)\n    if (props.routeLoaded) {\n        return (\n            <React.Fragment>\n                <p>Please select a route from the options below to see the directions and stops available for you!</p>\n                <select id=\"Route\" data-testid=\"Select-Route\" name=\"Route\" onChange={props.routeHandler}>\n                    {props.routeData.map(data => (\n                        <option key={data.Route} value={data.Route}>{data.Description}</option>\n                    ))}\n                </select>\n                <i className=\"fas fa-arrow-circle-down\"></i>\n            </React.Fragment>\n        )\n    }\n    else {\n        return <div>Loading</div>\n    }\n}\n/*\nconst ChooseDirection = (props) => {\n    console.log(\"In Choose Directions\")\n    if (props.directionLoaded) {\n        return (<React.Fragment>\n            <div className=\"description\">Choose a direction: </div>\n            <input type='radio' name='Direction' id={props.directionData0.Value} value={props.directionData0.Value} onClick={props.directionHandler} defaultChecked ></input><label htmlFor={props.directionData0.Value}>{props.directionData0.Text.toLowerCase()}</label>\n            <input type='radio' name='Direction' id={props.directionData1.Value} value={props.directionData1.Value} onClick={props.directionHandler}></input><label htmlFor={props.directionData1.Value}>{props.directionData1.Text.toLowerCase()}</label>\n        </React.Fragment>)\n    }\n    else {\n        return null\n    }\n}*/\n\nconst ShowStops = (props) => {\n    if (props.stopLoaded) {\n        return (\n            <ul>\n            {props.stopData.map(stop => (\n                <li key={stop.Value}>{stop.Text}</li>\n            ))}\n            </ul>\n        )\n    } else {\n        return (\n            <div>Please choose a route above to see related stops.</div>\n        )\n    }\n}\n\nclass Master extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routeData: [],\n            route: '',\n            routeLoaded: false,\n            routeLoading: false,\n            directionData: [],\n            direction: '',\n            directionLoaded: false,\n            directionLoading: false,\n            stopData: [],\n            stopLoaded: false,\n            stopLoading: false,\n            error: null\n        }\n        this.getStops = this.getStops.bind(this);\n        this.changeDirection = this.changeDirection.bind(this);\n        this.handleDirection = this.handleDirection.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.setState({ routeLoading: true })\n\n        fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({\n                    routeLoading: false,\n                    routeLoaded: true,\n                    routeData: result\n                })\n                console.log(\"Route is loaded, here is data: \")\n                console.log(this.state.routeData)\n            }, (error) => {\n                this.setState({\n                    routeLoaded: false, \n                    routeLoading: false, \n                    error\n                });\n            })\n    }\n\n    getStops = () => {\n        console.log(\"In getStops\");\n        this.setState({ stopLoading: true })\n\n        console.log(\"Fetching this route: \")\n        console.log('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json')\n\n        fetch('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json')\n          .then(res => res.json())\n          .then((result) => {\n              this.setState({\n                  stopData: result,\n                  stopLoaded: true\n              })\n          }, (error) => {\n            this.setState({\n                stopLoaded: false, \n                stopLoading: false, \n                error\n            });\n        })\n    }\n\n    changeDirection = ( event ) => {\n        console.log(\"in change direction\")\n        this.setState({\n            direction: event.target.value\n        }, this.getStops);\n    }\n\n    handleDirection = (event) => {\n        console.log(\"In handleDirection\")\n        // Update state values\n        this.setState({\n            route: event.target.value,\n            directionLoading: true,\n            directionLoaded: false\n        })\n\n        console.log(\"Updated state.route to\")\n        console.log(event.target.value)\n        console.log('In handle direction');\n\n        fetch('https://svc.metrotransit.org/NexTrip/Directions/' + event.target.value + '?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({\n                    directionLoaded: true,\n                    directionLoading: false,\n                    directionData: result,\n                    direction: result[0].Value\n                })\n                this.getStops();\n            }, (error) => {\n                this.setState({\n                    directionLoaded: false, \n                    directionLoading: false, \n                    error\n                });\n            })\n    }\n\n    render () {\n        return (\n            <Switch>\n            <React.Fragment>\n            <div className='route-container'>\n                {/* {this.state.routeLoaded\n                    ? <React.Fragment>\n                            <p>Please select a route from the options below to see the directions and stops available for you!</p>\n                            <select id=\"Route\" data-testid=\"Select-Route\" name=\"Route\" onChange={this.handleDirection}>\n                                {this.state.routeData.map(data => (\n                                    <option key={data.Route} value={data.Route}>{data.Description}</option>\n                                ))}\n                            </select>\n                            <i className=\"fas fa-arrow-circle-down\"></i>\n                        </React.Fragment>\n                    : <div>Loading</div>\n                } */}\n                <ChooseRoute state={this.state} routeLoaded={this.state.routeLoaded} routeData={this.state.routeData} routeHandler={this.handleDirection}/>\n                \n                 <div className=\"directions-container\" data-testid=\"Direction-Container\">\n                    <ChooseDirection directionLoaded={this.state.directionLoaded} directionData0={this.state.directionData[0]} directionData1={this.state.directionData[1]} directionHandler={this.changeDirection} />\n                 {/*   {this.state.directionLoaded\n                        ? <React.Fragment>\n                                    <div className=\"description\">Choose a direction: </div>\n                                    <input type='radio' name='Direction' id={this.state.directionData[0].Value} value={this.state.directionData[0].Value} onClick={this.changeDirection} defaultChecked ></input><label htmlFor={this.state.directionData[0].Value}>{this.state.directionData[0].Text.toLowerCase()}</label>\n                                    <input type='radio' name='Direction' id={this.state.directionData[1].Value} value={this.state.directionData[1].Value} onClick={this.changeDirection}></input><label htmlFor={this.state.directionData[1].Value}>{this.state.directionData[1].Text.toLowerCase()}</label>\n                                </React.Fragment>\n                        : null\n                    }*/}\n                </div>\n                \n                </div>\n                <div className=\"stops-container\" data-testid=\"Stops-Container\">\n                    <h2>Stops</h2>\n                    <ShowStops stopLoaded={this.state.stopLoaded} stopData={this.state.stopData} />\n{/*                     \n                    {this.state.stopLoaded\n                        ? <ul>\n                            {this.state.stopData.map(stop => (\n                                <li key={stop.Value}>{stop.Text}</li>\n                            ))}\n                            </ul>\n                        : <div>Please choose a route above to see related stops.</div>\n                    } */}\n                    \n                </div>\n            </React.Fragment>\n            </Switch>\n        )\n    }\n}\n\n// ? <select id=\"Directions\" name=\"Direction\" onChange={this.changeDirection}>\n                        //         <option value={this.state.directionData[0].Value}>{this.state.directionData[0].Text}</option>\n                        //         <option value={this.state.directionData[1].Value}>{this.state.directionData[1].Text}</option>\n                        //     </select>\n\n\nfunction App() {\n    return (\n        <div className='content'>\n            <div className='note'><h4 className='color-red'>This application is sourced by real-time data from </h4> <img src='https://www.metrotransit.org/img/MetroTransitLogo.svg'></img></div>\n            <h1>NexTrip</h1>\n            <BrowserRouter>\n            <div className='application'>\n                <Master />\n            </div>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}