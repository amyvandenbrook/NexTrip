{"ast":null,"code":"var _jsxFileName = \"/Users/amyolsen/Documents/ReactJS/next-trip/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport logo from \"./logo.svg\";\nimport './Mobile.css';\nimport './Tablet.css';\nimport './Desktop.css';\nimport './Luxury.css';\nimport './App.css';\n\nconst Stops = state => {\n  if (state.stopLoaded) {\n    return state.stopData.map(stop => {\n      return React.createElement(\"li\", {\n        key: stop.Value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, stop.Text);\n    });\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \" Awaiting the stops to come! \");\n  }\n};\n\nconst Directions = state => {\n  if (!state.directionLoaded) {\n    return null;\n  } else {\n    return React.createElement(\"select\", {\n      id: \"Directions\",\n      name: \"Direction\",\n      onChange: this.changeDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: state.directionData[0].Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, state.directionData[0].Text), React.createElement(\"option\", {\n      value: state.directionData[1].Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, state.directionData[1].Text));\n  }\n};\n\nconst Routes = state => {\n  if (!state.routeLoaded) {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Route is loading...\");\n  } else {\n    return React.createElement(\"select\", {\n      id: \"Route\",\n      name: \"Route\",\n      onChange: this.handleDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, state.routeData.map(data => React.createElement(\"option\", {\n      key: data.Route,\n      value: data.Route,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, data.Description)), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, state.routeData[0].description));\n  }\n};\n\nclass ChooseRoute extends Component {\n  render() {\n    {\n      this.state.routeLoaded ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Please select a route from the options below to see the directions and stops available for you!\"), React.createElement(\"select\", {\n        id: \"Route\",\n        \"data-testid\": \"Select-Route\",\n        name: \"Route\",\n        onChange: this.handleDirection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, this.state.routeData.map(data => React.createElement(\"option\", {\n        key: data.Route,\n        value: data.Route,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, data.Description))), React.createElement(\"i\", {\n        className: \"fas fa-arrow-circle-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Loading\");\n    }\n  }\n\n} // class Routes extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             error: null,\n//             loading: false,\n//             data: [],\n//             directionData: [],\n//             value: '',\n//             route: '',\n//             direction: '',\n//             direction1Text: '',\n//             direction1Value: '',\n//             direction2Text: '',\n//             direction2Value: '',\n//             stopData: []\n//         }\n//         this.handleDirection = this\n//             .handleDirection\n//             .bind(this);\n//     }\n//     componentDidMount = () => {\n//         state.routeLoading = true\n//         fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json')\n//             .then(res => res.json())\n//             .then((result) => {\n//                 state.routeLoading = false;\n//                 state.routeLoaded = true;\n//                 state.routeData = result;\n//                 console.log(\"Received data\")\n//                 console.log(state.routeData)\n//             }, (error) => {\n//                 state.error = error;\n//             })\n//     }\n//     render() {\n//         if (state.error) {\n//             return <div>Error: {state.error.message}</div>;\n//         } else {\n//             return (\n//                 <div>\n//                     <div>{state.routeDataLoaded}</div>\n//                     <select id=\"Route\" name=\"Route\" onChange={this.handleDirection}>\n//                         {state.routeData.map(data => (\n//                             <option key={data.Route} value={data.Route}>{data.Description}</option>\n//                         ))}\n//                         <option>{state.routeData[0].description}</option>\n//                     </select>\n//                     <Directions />\n//                     <div className=\"stops-container\">\n//                         <ul>\n//                             <Stops />\n//                         </ul>\n//                     </div>\n//                 </div>\n//             )\n//         }\n//     }\n// }\n\n\nclass Master extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.setState({\n        routeLoading: true\n      });\n      fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          routeLoading: false,\n          routeLoaded: true,\n          routeData: result\n        });\n        console.log(\"Route is loaded, here is data: \");\n        console.log(this.state.routeData);\n      }, error => {\n        this.setState({\n          routeLoaded: false,\n          routeLoading: false,\n          error\n        });\n      });\n    };\n\n    this.getStops = () => {\n      console.log(\"In getStops\");\n      this.setState({\n        stopLoading: true\n      });\n      console.log(\"Fetching this route: \");\n      console.log('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json');\n      fetch('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          stopData: result,\n          stopLoaded: true\n        });\n      }, error => {\n        this.setState({\n          stopLoaded: false,\n          stopLoading: false,\n          error\n        });\n      });\n    };\n\n    this.changeDirection = event => {\n      this.setState({\n        direction: event.target.value\n      }, this.getStops);\n    };\n\n    this.handleDirection = event => {\n      console.log(\"In handleDirection\"); // Update state values\n\n      this.setState({\n        route: event.target.value,\n        directionLoading: true,\n        directionLoaded: false\n      });\n      console.log(\"Updated state.route to\");\n      console.log(event.target.value);\n      console.log('In handle direction');\n      fetch('https://svc.metrotransit.org/NexTrip/Directions/' + event.target.value + '?format=json').then(res => res.json()).then(result => {\n        this.setState({\n          directionLoaded: true,\n          directionLoading: false,\n          directionData: result,\n          direction: result[0].Value\n        });\n        this.getStops();\n      }, error => {\n        this.setState({\n          directionLoaded: false,\n          directionLoading: false,\n          error\n        });\n      });\n    };\n\n    this.state = {\n      routeData: [],\n      route: '',\n      routeLoaded: false,\n      routeLoading: false,\n      directionData: [],\n      direction: '',\n      directionLoaded: false,\n      directionLoading: false,\n      stopData: [],\n      stopLoaded: false,\n      stopLoading: false,\n      error: null\n    };\n    this.getStops = this.getStops.bind(this);\n    this.changeDirection = this.changeDirection.bind(this);\n    this.handleDirection = this.handleDirection.bind(this);\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/:id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"route-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(ChooseRoute, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"directions-container\",\n      \"data-testid\": \"Direction-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, this.state.directionLoaded ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Choose a direction: \"), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"Direction\",\n      id: this.state.directionData[0].Value,\n      value: this.state.directionData[0].Value,\n      onClick: this.changeDirection,\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: this.state.directionData[0].Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.state.directionData[0].Text.toLowerCase()), React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"Direction\",\n      id: this.state.directionData[1].Value,\n      value: this.state.directionData[1].Value,\n      onClick: this.changeDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: this.state.directionData[1].Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, this.state.directionData[1].Text.toLowerCase())) : null))), React.createElement(\"div\", {\n      className: \"stops-container\",\n      \"data-testid\": \"Stops-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Stops\"), this.state.stopLoaded ? React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, this.state.stopData.map(stop => React.createElement(\"li\", {\n      key: stop.Value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, stop.Text))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Please choose a route above to see related stops.\"))));\n  }\n\n} // ? <select id=\"Directions\" name=\"Direction\" onChange={this.changeDirection}>\n//         <option value={this.state.directionData[0].Value}>{this.state.directionData[0].Text}</option>\n//         <option value={this.state.directionData[1].Value}>{this.state.directionData[1].Text}</option>\n//     </select>\n\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"note\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"color-red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \"This application is sourced by real-time data from \"), \" \", React.createElement(\"img\", {\n    src: \"https://www.metrotransit.org/img/MetroTransitLogo.svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  })), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"NexTrip\"), React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"application\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(Master, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/amyolsen/Documents/ReactJS/next-trip/src/App.js"],"names":["React","Component","BrowserRouter","Route","Switch","Stops","state","stopLoaded","stopData","map","stop","Value","Text","Directions","directionLoaded","changeDirection","directionData","Routes","routeLoaded","handleDirection","routeData","data","Description","description","ChooseRoute","render","Master","constructor","props","componentDidMount","setState","routeLoading","fetch","then","res","json","result","console","log","error","getStops","stopLoading","route","direction","event","target","value","directionLoading","bind","toLowerCase","App"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './Mobile.css';\nimport './Tablet.css';\nimport './Desktop.css';\nimport './Luxury.css';\nimport './App.css';\n\n\nconst Stops = ( state ) => {\n    if (state.stopLoaded) {\n        return state.stopData.map(stop => {\n            return (\n                <li key={stop.Value}>{stop.Text}</li>\n            )\n        })\n    } else {\n        return (<div> Awaiting the stops to come! </div>)\n    }\n}\n\nconst Directions = ( state ) => {\n    if (!state.directionLoaded) {\n        return (null)\n    } else {\n        return (\n            <select id=\"Directions\" name=\"Direction\" onChange={this.changeDirection}>\n                <option value={state.directionData[0].Value}>{state.directionData[0].Text}</option>\n                <option value={state.directionData[1].Value}>{state.directionData[1].Text}</option>\n            </select>\n        )\n    }\n}\n\nconst Routes = ( state ) => {\n    if (!state.routeLoaded) {\n        return (<h1>Route is loading...</h1>)\n    } else {\n        return (\n            <select id=\"Route\" name=\"Route\" onChange={this.handleDirection}>\n                        {state.routeData.map(data => (\n                            <option key={data.Route} value={data.Route}>{data.Description}</option>\n                        ))}\n                        <option>{state.routeData[0].description}</option>\n                    </select>\n        )\n    }\n}\n\nclass ChooseRoute extends Component {\n    render () {\n        {this.state.routeLoaded\n            ? <React.Fragment>\n                    <p>Please select a route from the options below to see the directions and stops available for you!</p>\n                    <select id=\"Route\" data-testid=\"Select-Route\" name=\"Route\" onChange={this.handleDirection}>\n                        {this.state.routeData.map(data => (\n                            <option key={data.Route} value={data.Route}>{data.Description}</option>\n                        ))}\n                    </select>\n                    <i className=\"fas fa-arrow-circle-down\"></i>\n                </React.Fragment>\n            : <div>Loading</div>\n        }\n    }\n}\n\n// class Routes extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             error: null,\n//             loading: false,\n//             data: [],\n//             directionData: [],\n//             value: '',\n//             route: '',\n//             direction: '',\n//             direction1Text: '',\n//             direction1Value: '',\n//             direction2Text: '',\n//             direction2Value: '',\n//             stopData: []\n//         }\n\n//         this.handleDirection = this\n//             .handleDirection\n//             .bind(this);\n//     }\n\n//     componentDidMount = () => {\n//         state.routeLoading = true\n//         fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json')\n//             .then(res => res.json())\n//             .then((result) => {\n//                 state.routeLoading = false;\n//                 state.routeLoaded = true;\n//                 state.routeData = result;\n//                 console.log(\"Received data\")\n//                 console.log(state.routeData)\n//             }, (error) => {\n//                 state.error = error;\n//             })\n//     }\n\n//     render() {\n//         if (state.error) {\n//             return <div>Error: {state.error.message}</div>;\n//         } else {\n//             return (\n//                 <div>\n//                     <div>{state.routeDataLoaded}</div>\n//                     <select id=\"Route\" name=\"Route\" onChange={this.handleDirection}>\n//                         {state.routeData.map(data => (\n//                             <option key={data.Route} value={data.Route}>{data.Description}</option>\n//                         ))}\n//                         <option>{state.routeData[0].description}</option>\n//                     </select>\n//                     <Directions />\n//                     <div className=\"stops-container\">\n//                         <ul>\n//                             <Stops />\n//                         </ul>\n//                     </div>\n                    \n//                 </div>\n//             )\n//         }\n//     }\n// }\n\nclass Master extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routeData: [],\n            route: '',\n            routeLoaded: false,\n            routeLoading: false,\n            directionData: [],\n            direction: '',\n            directionLoaded: false,\n            directionLoading: false,\n            stopData: [],\n            stopLoaded: false,\n            stopLoading: false,\n            error: null\n        }\n        this.getStops = this.getStops.bind(this);\n        this.changeDirection = this.changeDirection.bind(this);\n        this.handleDirection = this.handleDirection.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.setState({ routeLoading: true })\n\n        fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({\n                    routeLoading: false,\n                    routeLoaded: true,\n                    routeData: result\n                })\n                console.log(\"Route is loaded, here is data: \")\n                console.log(this.state.routeData)\n            }, (error) => {\n                this.setState({\n                    routeLoaded: false, \n                    routeLoading: false, \n                    error\n                });\n            })\n    }\n\n    getStops = () => {\n        console.log(\"In getStops\");\n        this.setState({ stopLoading: true })\n\n        console.log(\"Fetching this route: \")\n        console.log('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json')\n\n        fetch('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json')\n          .then(res => res.json())\n          .then((result) => {\n              this.setState({\n                  stopData: result,\n                  stopLoaded: true\n              })\n          }, (error) => {\n            this.setState({\n                stopLoaded: false, \n                stopLoading: false, \n                error\n            });\n        })\n    }\n\n    changeDirection = ( event ) => {\n        this.setState({\n            direction: event.target.value\n        }, this.getStops);\n    }\n\n    handleDirection = (event) => {\n        console.log(\"In handleDirection\")\n        // Update state values\n        this.setState({\n            route: event.target.value,\n            directionLoading: true,\n            directionLoaded: false\n        })\n\n        console.log(\"Updated state.route to\")\n        console.log(event.target.value)\n        console.log('In handle direction');\n\n        fetch('https://svc.metrotransit.org/NexTrip/Directions/' + event.target.value + '?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({\n                    directionLoaded: true,\n                    directionLoading: false,\n                    directionData: result,\n                    direction: result[0].Value\n                })\n                this.getStops();\n            }, (error) => {\n                this.setState({\n                    directionLoaded: false, \n                    directionLoading: false, \n                    error\n                });\n            })\n    }\n\n    render () {\n        return (\n            <Switch>\n            <React.Fragment>\n            <Route path=\"/:id\" >\n            <div className='route-container'>\n                {/* {this.state.routeLoaded\n                    ? <React.Fragment>\n                            <p>Please select a route from the options below to see the directions and stops available for you!</p>\n                            <select id=\"Route\" data-testid=\"Select-Route\" name=\"Route\" onChange={this.handleDirection}>\n                                {this.state.routeData.map(data => (\n                                    <option key={data.Route} value={data.Route}>{data.Description}</option>\n                                ))}\n                            </select>\n                            <i className=\"fas fa-arrow-circle-down\"></i>\n                        </React.Fragment>\n                    : <div>Loading</div>\n                } */}\n                <ChooseRoute />\n                \n                <div className=\"directions-container\" data-testid=\"Direction-Container\">\n                    {this.state.directionLoaded\n                        ? <React.Fragment>\n                                    <div className=\"description\">Choose a direction: </div>\n                                    <input type='radio' name='Direction' id={this.state.directionData[0].Value} value={this.state.directionData[0].Value} onClick={this.changeDirection} defaultChecked ></input><label htmlFor={this.state.directionData[0].Value}>{this.state.directionData[0].Text.toLowerCase()}</label>\n                                    <input type='radio' name='Direction' id={this.state.directionData[1].Value} value={this.state.directionData[1].Value} onClick={this.changeDirection}></input><label htmlFor={this.state.directionData[1].Value}>{this.state.directionData[1].Text.toLowerCase()}</label>\n                                </React.Fragment>\n                        : null\n                    }\n                </div>\n                </div>\n                </Route>\n                <div className=\"stops-container\" data-testid=\"Stops-Container\">\n                    <h2>Stops</h2>\n                    {this.state.stopLoaded\n                        ? <ul>\n                            {this.state.stopData.map(stop => (\n                                <li key={stop.Value}>{stop.Text}</li>\n                            ))}\n                            </ul>\n                        : <div>Please choose a route above to see related stops.</div>\n                    }\n                    \n                </div>\n            </React.Fragment>\n            </Switch>\n        )\n    }\n}\n\n// ? <select id=\"Directions\" name=\"Direction\" onChange={this.changeDirection}>\n                        //         <option value={this.state.directionData[0].Value}>{this.state.directionData[0].Text}</option>\n                        //         <option value={this.state.directionData[1].Value}>{this.state.directionData[1].Text}</option>\n                        //     </select>\n\n\nfunction App() {\n    return (\n        <div className='content'>\n            <div className='note'><h4 className='color-red'>This application is sourced by real-time data from </h4> <img src='https://www.metrotransit.org/img/MetroTransitLogo.svg'></img></div>\n            <h1>NexTrip</h1>\n            <BrowserRouter>\n            <div className='application'>\n                <Master />\n            </div>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}