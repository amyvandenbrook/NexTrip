{"version":3,"sources":["Direction.js","Route.js","Stops.js","App.js","index.js"],"names":["ChooseDirection","props","directionLoaded","window","location","href","toString","includes","testDirection","Fragment","className","type","name","id","directionData0","Value","value","onClick","directionHandler","defaultChecked","htmlFor","Text","toLowerCase","directionData1","ChooseRoute","routeLoaded","data-testid","onChange","routeHandler","routeChanged","routeData","map","data","key","Route","Description","ShowStops","stopLoaded","stopData","stop","Master","componentDidMount","setState","routeLoading","fetch","then","res","json","result","error","getStops","stopLoading","state","route","direction","event","target","directionLoading","directionData","history","pushState","bind","this","path","render","Component","App","alt","src","exact","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8aa9846c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ChooseDirection = (props) => {\n    if (props.directionLoaded && (window.location.href.toString().includes('#Directions') || props.testDirection)) {\n        return (\n            <React.Fragment>\n                <div className=\"description\">Choose a direction:\n                </div>\n                <input\n                    type='radio'\n                    name='Direction'\n                    id={props.directionData0.Value}\n                    value={props.directionData0.Value}\n                    onClick={props.directionHandler}\n                    defaultChecked></input>\n                <label htmlFor={props.directionData0.Value}>{props\n                        .directionData0\n                        .Text\n                        .toLowerCase()}</label>\n                <input\n                    type='radio'\n                    name='Direction'\n                    id={props.directionData1.Value}\n                    value={props.directionData1.Value}\n                    onClick={props.directionHandler}></input>\n                <label htmlFor={props.directionData1.Value}>{props\n                        .directionData1\n                        .Text\n                        .toLowerCase()}</label>\n            </React.Fragment>\n        )\n    } else {\n        return null\n    }\n}","import React from 'react'\n\nexport const ChooseRoute = ( props ) => {\n    if (props.routeLoaded) {\n        return (\n            <React.Fragment>\n                <p>Please select a route from the options below to see the directions and stops available for you!</p>\n                <select id=\"Route\" data-testid=\"Select-Route\" name=\"Route\" onChange={props.routeHandler}>\n                    {!props.routeChanged ? <option value={-1}>Select a Route</option> : null};\n                    {props.routeData.map(data => (\n                        <option key={data.Route} value={data.Route}>{data.Description}</option>\n                    ))}\n                </select>\n                <i className=\"fas fa-arrow-circle-down\"></i>\n            </React.Fragment>\n        )\n    }\n    else {\n        return <div>Loading</div>\n    }\n}","import React from 'react'\n\nexport const ShowStops = (props) => {\n    if (props.stopLoaded) {\n        return (\n            <ul>\n            {props.stopData.map(stop => (\n                <li key={stop.Value}>{stop.Text}</li>\n            ))}\n            </ul>\n        )\n    } else {\n        return (\n            <div>Please choose a route above to see related stops.</div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {ChooseDirection} from './Direction';\nimport {ChooseRoute} from './Route';\nimport {ShowStops} from './Stops';\nimport './Mobile.css';\nimport './Tablet.css';\nimport './Desktop.css';\nimport './Luxury.css';\nimport './App.css';\n\nclass Master extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            routeData: [],\n            route: '',\n            routeChanged: false,\n            routeLoaded: false,\n            routeLoading: false,\n            directionData: [],\n            direction: '',\n            directionLoaded: false,\n            directionLoading: false,\n            stopData: [],\n            stopLoaded: false,\n            stopLoading: false,\n            error: null\n        }\n        this.getStops = this\n            .getStops\n            .bind(this);\n        this.directionHandler = this\n            .directionHandler\n            .bind(this);\n        this.routeHandler = this\n            .routeHandler\n            .bind(this);\n    }\n\n    componentDidMount = () => {\n        this.setState({routeLoading: true})\n\n        fetch('https://svc.metrotransit.org/NexTrip/Routes?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({routeLoading: false, routeLoaded: true, routeData: result})\n            }, (error) => {\n                this.setState({routeLoaded: false, routeLoading: false, error});\n            })\n    }\n\n    getStops = () => {\n        this.setState({stopLoading: true})\n\n        fetch('https://svc.metrotransit.org/NexTrip/Stops/' + this.state.route + '/' + this.state.direction + '?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({stopData: result, stopLoaded: true})\n            }, (error) => {\n                this.setState({stopLoaded: false, stopLoading: false, error});\n            })\n    }\n\n    directionHandler = (event) => {\n        this.setState({\n            direction: event.target.value\n        }, this.getStops);\n    }\n\n    routeHandler = (event) => {\n        // Update state values\n        this.setState({route: event.target.value, routeChanged: true, directionLoading: true, directionLoaded: false})\n\n        fetch('https://svc.metrotransit.org/NexTrip/Directions/' + event.target.value + '?format=json')\n            .then(res => res.json())\n            .then((result) => {\n                this.setState({directionLoaded: true, directionLoading: false, directionData: result, direction: result[0].Value})\n                if (!window.location.href.toString().includes('#Directions')) {\n                    window\n                        .history\n                        .pushState(window.location.href, '', window.location.href + '#Directions');\n                }\n                this.getStops();\n            }, (error) => {\n                this.setState({directionLoaded: false, directionLoading: false, error});\n            })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className='route-container'>\n                    <ChooseRoute\n                        routeLoaded={this.state.routeLoaded}\n                        routeData={this.state.routeData}\n                        routeHandler={this.routeHandler}\n                        routeChanged={this.state.routeChanged}/>\n\n                    <div className=\"directions-container\" data-testid=\"Direction-Container\">\n                        <ChooseDirection\n                            directionLoaded={this.state.directionLoaded}\n                            directionData0={this.state.directionData[0]}\n                            directionData1={this.state.directionData[1]}\n                            directionHandler={this.directionHandler}\n                            testDirection={false}/>\n                    </div>\n                </div>\n                <div className=\"stops-container\" data-testid=\"Stops-Container\">\n                    <h2>Stops</h2>\n                    <ShowStops stopLoaded={this.state.stopLoaded} stopData={this.state.stopData}/>\n                    <Route\n                        path=\"/stops\"\n                        render={() => <ShowStops stopLoaded={this.state.stopLoaded} stopData={this.state.stopData}/>}/>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nfunction initializeNexTrip () {\n    if (!window.location.href.toString().includes('NexTrip')) {\n        window\n            .history\n            .pushState(window.location.href, '', window.location.href + 'NexTrip');\n    }\n}\n\nfunction App() {\n    initializeNexTrip();\n    return (\n        <BrowserRouter>\n        <div className='content'>\n            <div className='note'>\n                <h4>This application is sourced by real-time data from </h4>\n                <img alt='Metro Transit Logo' src='https://www.metrotransit.org/img/MetroTransitLogo.svg'></img>\n            </div>\n            <h1>NexTrip</h1>\n                <div className='application'>\n                    <Route exact path='/NexTrip' component={Master} />\n                </div>\n        </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}